MATS: Multi-spectrum Analysis Tool for Spectroscopy
===================================================

`Erin M. Adkins <mailto:erin.adkins@nist.gov>`_

*National Institute of Standards and Technology*

*Last Revision* |today|

`This software is available on GitHub <https://github.com/usnistgov/MATS>`_

**The purpose of the MATS project is to develop a NIST-based multi-spectrum fitting and analysis tool for spectroscopic data that allows the flexibility to test and adapt to experimental/data-driven needs.  This software allows for the use of several commonly-used spectroscopic line profiles (Voigt, Nelkin-Ghatak, speed-dependent Voigt, speed-dependent Nelkin-Ghatak, and Hartmann-Tran) and allows for pressure, temperature, and sample composition constraints to be imposed on solutions.  In addition to fitting experimental spectra, MATS can generate simulated spectram, which allows for its use as an error analysis tool.**

In multi-spectrum fitting, there are a collection of spectrum that can be modeled by the same line-by-line spectroscopic parameters, but might vary in pressure, temperature, and sample composition.  

The MATS program is based on :py:class:`MATS.Spectrum` objects, which are defined by not only their wavenumber and absorption data, but also information on the spectrum pressure, temperature, baseline characteristics, and sample composition.  In addition to utilizing real spectra, there is a :py:func:`MATS.simulate_spectrum` function, which returns a spectrum object that match input simulation parameters.  This is useful for performing error analysis in the same framework as primary data analysis.  These :py:class:`MATS.Spectrum` objects are combined to form a :py:class:`MATS.Dataset` object, which is the collection of spectra that are being analyzed together in the multi-spectrum analysis.  

There are two files that contain parameters that are fit in this model, one for spectrum dependent parameters (baseline parameters, etalons, sample composition, x-shift) and the other for linelist parameters that are common across all spectra.  These files are saved locally as .csv files with a column for each parameter and with rows corresponding to either the spectrum number or spectral line number.  In addition to the columns for fit parameter, there are two additional columns for each parameter called param_vary and param_err.  The param_vary column is a boolean flag that is toggled to indicate whether a given parameter will be varied in the fit.  The param_err column will be set to zero initially and replaced with the fit error value, if it is floated after fitting.  Calls of the :py:class:`MATS.Generate_FitParam_File` class not only makes these input files, but also set the lineshape (HTP derivatives) and define initial conditions for whether a parameter should be varied and whether the parameter should be constrained to multi-spectrum fit or allowed to vary by spectrum.  The :py:class:`MATS.Edit_Fit_Param_Files` class allows for edits to the parameters files in the ipython interface rather than editing in the .csv file. 

Finally, the :py:class:`MATS.Fit_DataSet` class fits the data and allows you to impose constraints on the parameters (min and max values), impose simulation and impose convergence criteria, update parameter/parameter line lists, and plot fit results.  

Contents
++++++++

.. toctree::
   :maxdepth: 2
   
   Getting Started
   MATS Summary
   Generating Pandas Line lists from HITRAN
   MATS
   


Legal
+++++

This software is subject to the `NIST Software License <https://www.nist.gov/director/licensing>`_ (revised as of August 2018).

Contact
+++++++

Erin Adkins

* `Email <mailto:erin.adkins@nist.gov>`_
* `NIST Staff Page <https://www.nist.gov/people/erin-adkins>`_
* `GitHub profile <https://github.com/eadkins333>`_

Links
+++++

`NIST GitHub Organization <https://github.com/usnistgov>`_

`NIST Optical Measurements Group <https://www.nist.gov/mml/csd/optical-measurements-group>`_

`NIST Home Page <http://nist.gov>`_

  
Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
