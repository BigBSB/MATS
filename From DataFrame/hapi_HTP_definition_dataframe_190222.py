{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Multi- Spectrum Fitting by Segment\n",
    "\n",
    "import numpy as np\n",
    "import numpy.ma as ma\n",
    "import pandas as pd\n",
    "import qgrid\n",
    "import os\n",
    "from lmfit import minimize, Parameters, report_fit, Model, Minimizer\n",
    "from lmfit.models import GaussianModel, LinearModel, Model, VoigtModel\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import gridspec\n",
    "from scipy import interpolate\n",
    "\n",
    "import sys\n",
    "sys.path.append(r'C:\\Users\\ema3\\Documents\\Python Scripts\\HAPI')# set location of HAPI.py module\n",
    "sys.path.append(r'C:\\Users\\ema3\\Documents\\Cold Cavity - O2 A Band')# set location of HAPI.py module\n",
    "%matplotlib inline\n",
    "from hapi import *\n",
    "from hapi_HTP_definition_dataframe_190409 import *\n",
    "\n",
    "import seaborn as sns\n",
    "sns.set_style(\"whitegrid\")\n",
    "sns.set_style(\"ticks\")\n",
    "sns.set_context(\"poster\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = r'C:\\Users\\ema3\\Documents\\Data\\Intensity Scans' # Location of the Summary Data File\n",
    "os.chdir(path)\n",
    "\n",
    "#Generic Fit Parameters\n",
    "wave_range = 1.5 #range outside of experimental x-range to simulate\n",
    "IntensityThreshold = 1e-30 #intensities must be above this value to be simulated\n",
    "Fit_Intensity = 1e-24 #intensities must be above this value for the line to be fit\n",
    "order_baseline_fit = 1\n",
    "tau_column = 'Corrected Tau - Etalon' # Tau - Etalon, Corrected Tau - Etalon, Corrected Tau (us), Mean tau/us\n",
    "#\n",
    "freq_column = 'Frequency (FSR) /MHz' # Total Frequency /MHz, Total Frequency (Detuning)\n",
    "\n",
    "\n",
    "#Define all Spectra individually\n",
    "spec_1 = Spectrum('21Feb18_237.5K_0.2__1000Torr_etalon_Seg5', \n",
    "                        concentration = { 7 : 0.002022}, natural_abundance = False, diluent = 'air', \n",
    "                        etalons = {}, \n",
    "                        input_freq = True, frequency_column = freq_column,\n",
    "                        input_tau = True, tau_column = tau_column, tau_stats_column = None, \n",
    "                        pressure_column = 'Cavity Pressure /Torr', temperature_column = 'Cavity Temperature Side 2 /C', \n",
    "                        nominal_temperature = 237, abundance_ratio_MI = {7:{1:1/0.995262, 2:0 ,3:0}}, x_shift = 0.00)\n",
    "spec_2 = Spectrum('22Feb18_237.5K_0.2__700Torr_etalon_Seg5', \n",
    "                        concentration = { 7 : 0.002022}, natural_abundance = False, diluent = 'air', \n",
    "                        etalons = {}, \n",
    "                        input_freq = True, frequency_column = freq_column,\n",
    "                        input_tau = True, tau_column = tau_column, tau_stats_column = None, \n",
    "                        pressure_column = 'Cavity Pressure /Torr', temperature_column = 'Cavity Temperature Side 2 /C', \n",
    "                        nominal_temperature = 237, abundance_ratio_MI = {7:{1:1/0.995262, 2:0 ,3:0}}, x_shift = 0.00)\n",
    "spec_3 = Spectrum('23Feb18_237.5K_0.2__400Torr_etalon_Seg5', \n",
    "                        concentration = { 7 : 0.002022}, natural_abundance = False, diluent = 'air', \n",
    "                        etalons = {}, \n",
    "                        input_freq = True, frequency_column = freq_column,\n",
    "                        input_tau = True, tau_column = tau_column, tau_stats_column = None, \n",
    "                        pressure_column = 'Cavity Pressure /Torr', temperature_column = 'Cavity Temperature Side 2 /C', \n",
    "                        nominal_temperature = 237, abundance_ratio_MI = {7:{1:1/0.995262, 2:0 ,3:0}}, x_shift = 0.00)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Add all spectrum to a Dataset object\n",
    "SPECTRA = Dataset([spec_1, spec_2, spec_3], 'Old Data', baseline_order = order_baseline_fit)\n",
    "\n",
    "#Generate Baseline Parameter list based on number of etalons in spectra definitions and baseline order\n",
    "BASE_LINELIST = SPECTRA.generate_baseline_paramlist()\n",
    "\n",
    "#Read in Possible linelists\n",
    "hapi = r'C:\\Users\\ema3\\Documents\\Python Scripts\\HAPI'\n",
    "os.chdir(hapi)\n",
    "PARAM_LINELIST = pd.read_csv('Drouin_2017_linelist.csv')\n",
    "\n",
    "print (SPECTRA.get_number_nominal_temperatures())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(path)\n",
    "# Set-up for Fitting\n",
    "#lineprofile = 'NGP' #VP, SDVP, NGP, SDNGP, HTP\n",
    "\n",
    "\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "FITPARAMS = Generate_FitParam_File(SPECTRA, PARAM_LINELIST, BASE_LINELIST, lineprofile = 'SDVP', linemixing = True, \n",
    "                                  fit_intensity = Fit_Intensity, threshold_intensity = IntensityThreshold, \n",
    "                                  nu_constrain = False, sw_constrain = True, gamma0_constrain = True, delta0_constrain = True, \n",
    "                                   aw_constrain = True, as_constrain = True, \n",
    "                                   nuVC_constrain = True, eta_constrain =True, linemixing_constrain = True)\n",
    "\n",
    "FITPARAMS.generate_fit_param_linelist_from_linelist(vary_nu = {7:{1:True, 2:False, 3:False}}, vary_sw = {7:{1:True, 2:False, 3:False}},\n",
    "                                                    vary_gamma0 = {7:{1: True, 2:False, 3: False}, 1:{1:False}}, vary_n_gamma0 = {7:{1:True}}, \n",
    "                                                    vary_delta0 = {7:{1: False, 2:False, 3: False}, 1:{1:False}}, vary_n_delta0 = {7:{1:True}}, \n",
    "                                                    vary_aw = {7:{1: True, 2:False, 3: False}, 1:{1:False}}, vary_n_gamma2 = {7:{1:False}}, \n",
    "                                                    vary_as = {}, vary_n_delta2 = {7:{1:False}}, \n",
    "                                                    vary_nuVC = {7:{1:False}}, vary_n_nuVC = {7:{1:False}},\n",
    "                                                    vary_eta = {}, vary_linemixing = {7:{1:True}})\n",
    "\n",
    "FITPARAMS.generate_fit_baseline_linelist(vary_baseline = True, vary_concentration = {7:True, 1:False}, vary_xshift = False, \n",
    "                                      vary_etalon_amp= False, vary_etalon_freq= False, vary_etalon_phase= False)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edit_files = Edit_Fit_Param_Files('Baseline_LineList', 'Parameter_LineList')\n",
    "edit_baseline = edit_files.edit_generated_baselist()\n",
    "edit_baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edit_params = edit_files.edit_generated_paramlist()\n",
    "edit_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edit_files.save_editted_baselist(edit_baseline)\n",
    "edit_files.save_editted_paramlist(edit_params)\n",
    "print ('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(path)   \n",
    "fit_data = Fit_DataSet(SPECTRA,'Baseline_LineList', 'Parameter_LineList', fit_intensity = Fit_Intensity, \n",
    "                baseline_limit = False, baseline_limit_percent = 10, \n",
    "                concentration_limit = True, concentration_limit_percent = 1.1, \n",
    "                etalon_limit = False, etalon_limit_percent = 2, #phase is constrained to +/- 2pi, \n",
    "                x_shift_limit = True, x_shift_limit_magnitude = 0.5, \n",
    "                nu_limit = False, nu_limit_magnitude = 1, \n",
    "                sw_limit = True, sw_limit_percent = 2, \n",
    "                gamma0_limit = True, gamma0_limit_percent = 3, n_gamma0_limit= False, n_gamma0_limit_percent = 50, \n",
    "                delta0_limit = True, delta0_limit_percent = 2, n_delta0_limit = False, n_delta0_limit_percent = 50, \n",
    "                SD_gamma_limit = True, SD_gamma_limit_percent = 2, n_gamma2_limit = False, n_gamma2_limit_percent = 50, \n",
    "                SD_delta_limit = True, SD_delta_limit_percent = 50, n_delta2_limit = False, n_delta2_limit_percent = 50, \n",
    "                nuVC_limit = False, nuVC_limit_percent = 2, n_nuVC_limit = False, n_nuVC_limit_percent = 50, \n",
    "                eta_limit = True, eta_limit_percent = 50, linemixing_limit = False, linemixing_limit_percent = 50, constrain_n_SD = True)\n",
    "params = fit_data.generate_params()\n",
    "#params['etalon_2_freq_1'].set(expr='2*etalon_1_freq_1')\n",
    "#params['etalon_2_phase_1'].set(expr='etalon_1_phase_1')\n",
    "\n",
    "\n",
    "for param in params:\n",
    "    if 'n_gamma2' in param:\n",
    "        newparam = param.replace('n_gamma2', 'n_gamma0')\n",
    "        params[param].set(expr = newparam)\n",
    "\n",
    "\n",
    "\n",
    "#print (params)\n",
    "\n",
    "#add_expr_params(self, params, param_name, expr)\n",
    "\n",
    "result = fit_data.fit_data(params, wave_space = 1e-3, wing_cutoff = 25, wing_wavenumbers = 25)\n",
    "print (result.params.pretty_print())\n",
    "\n",
    "fit_data.residual_analysis(result, indv_resid_plot=True)\n",
    "fit_data.update_params(result)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spec_2.fft_spectrum()\n",
    "\n",
    "\n",
    "s_list = [spec_1, spec_2, spec_3, spec_4, spec_5, spec_6, spec_7, spec_8, spec_9, spec_10, spec_11, spec_12, spec_13, spec_14, spec_15, spec_16, \n",
    "         spec_17, spec_18, spec_19, spec_20, spec_21, spec_22, spec_23, spec_24]\n",
    "for s in s_list:\n",
    "    \n",
    "    print (s.get_pressure_torr(), s.get_temperature_C())\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
